"""
Experiment: Evaluating Heuristic Performance on Influence Maximization in Linear Threshold and Pressure Threshold Models with Directed Networks

Author: Curt Stutsman
Date: 11/18/2024

Description:
    This script tests the performance of various seed selection heuristics on two diffusion models:
    1. The Linear Threshold (LT) Model
    2. The Pressure Threshold (PT) Model

    Heuristics Evaluated:
    1. Degree Heuristic: Selects nodes based on their degree (highest first).
    2. Degree Discount Heuristic: Adjusts node degree based on the number of already-selected neighbors.
    3. Pressure Degree Heuristic: Selects nodes with a greater emphasis placed on number of parents.
    4. Pressure Degree Discount Heuristic: Combines pressure-based adjustments with degree discounting.

Goals:
- Compare the spread of influence generated by each heuristic in the LT and PT models.
- Analyze how the inclusion of pressure dynamics affects heuristic performance.
- Highlight differences in behavior and effectiveness across the two models.

Inputs:
--nodes:        number of nodes our directed graph will have
--edge_prob:    probablity of an edge occuring between any two nodes in the randomly generated graph
--alpha:        pressure parameter alpha to control influence a node's parents have on its outbound influence
--k:            number of seed nodes to select

Outputs:
- The script prints influence spread results for each heuristic under both models.
- Data is saved to csv files in /data/results 

"""

#=======================================
#   Library Imports
#=======================================
import pandas as pd
import argparse
from src.scripts.heuristic import degree_discount, degree
from src.scripts.influence import influence
from src.utils.graph_utils import create_directed_graph, add_random_thresholds
from src.utils.output_utils import save_results_to_csv
from src.scripts.weighted_network import weighted_network

#=======================================
#   Internal Function Defines
#=======================================
def parse_args():
    """
    Parse command-line arguments.
    """
    parser = argparse.ArgumentParser(description="Evaluate Heuristic Performance on Influence Maximization.")
    parser.add_argument("--nodes", type=int, required=True, help="Number of nodes in the graph.")
    parser.add_argument("--edge_prob", type=float, required=True, help="Probability of an edge between two nodes.")
    parser.add_argument("--alpha", type=float, required=True, help="Pressure parameter for influence propagation.")
    parser.add_argument("--k", type=int, required=True, help="Number of seed nodes to select.")
    return parser.parse_args()

#=======================================
#   Main Execution
#=======================================
if __name__ == "__main__":

    # Parse arguments
    args = parse_args()
    num_nodes = args.nodes
    budget = args.k
    edge_prob = args.edge_prob
    alpha = args.alpha
    output_dir = "data/results"

    # Create directed graph and add random weights and thresholds
    graph = create_directed_graph(num_nodes, edge_prob)
    graph = add_random_thresholds(graph)
    graph = weighted_network(graph, method='rn')

    heuristics = {
        "Degree": lambda g, k: degree(g, k, alpha=0),  # Standard degree heuristic
        "Degree Discount": lambda g, k: degree_discount(g, k, alpha=0),  # Standard degree discount heuristic
        "Pressure Degree": lambda g, k: degree(g, k, alpha=alpha),  # Modified degree heuristic with pressure
        "Pressure Degree Discount": lambda g, k: degree_discount(g, k, alpha=alpha),  # Modified degree discount with pressure
    }

    # Results container
    results = {"Model": [], "Heuristic": [], "Seed Nodes" : [], "Influence Spread": []}

    # Run experiments for each model
    for model_type in ["linear_threshold", "pressure_threshold"]:
        for heuristic_name, heuristic_fn in heuristics.items():
            # Use heuristic function to obtain seed set
            seed_set = heuristic_fn(graph, budget)

            # Calculate spread of seed set
            influence_spread = influence(graph, seed_set, model_type, alpha=alpha)

            results["Model"].append(model_type)
            results["Heuristic"].append(heuristic_name)
            results["Seed Nodes"].append(seed_set)
            results["Influence Spread"].append(influence_spread)

    # Save results to CSV
    save_results_to_csv(results, output_dir, f"heuristic_influence_{num_nodes}_nodes.csv")

    # Print results summary
    print("Experiment Results:")
    print(pd.DataFrame(results))